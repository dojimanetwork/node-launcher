apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dojima-chain.fullname" . }}
  labels:
    {{- include "dojima-chain.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: {{ .Values.strategyType }}
  selector:
    matchLabels:
      {{- include "dojima-chain.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "dojima-chain.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "dojima-chain.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}

      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}

      initContainers:
      - name: init-external-ip
        image: "alpine/k8s:{{ .Values.global.images.alpineK8s.tag }}@sha256:{{ .Values.global.images.alpineK8s.hash }}"
        {{- if .Values.global.gateway.enabled }}
        command: ['/scripts/external-ip.sh', 'false', '{{ .Values.global.gateway.name }}', '{{ include "dojima-chain.fullname" . }}-external-ip']
        {{- else }}
        command: ['/scripts/external-ip.sh', 'false', '{{ include "dojima-chain.fullname" . }}', '{{ include "dojima-chain.fullname" . }}-external-ip']
        {{- end }}
        volumeMounts:
        - name: scripts
          mountPath: /scripts
      - name: create-password-txt
        image: "alpine/k8s:{{ .Values.global.images.alpineK8s.tag }}@sha256:{{ .Values.global.images.alpineK8s.hash }}"
        command: [ '/scripts/password.sh', {{ .Values.global.namespace }} ]
        env:
          - name: SIGNER_PASSWD
             {{- if default .Values.signer.passwordSecret .Values.global.passwordSecret }}
            valueFrom:
              secretKeyRef:
                name: {{ default .Values.signer.passwordSecret .Values.global.passwordSecret }}
                key: password
             {{- else}}
            value: {{ .Values.signer.password }}
             {{- end }}
        volumeMounts:
          - name: scripts
            mountPath: /scripts
          - name: data
            mountPath: /root
      - name: generate-keystore
        image: {{ include "dojima-chain.hermesnode-image" . }}
        command: [ '/scripts/genesis.sh' ]
        env:
          - name: CHAIN_HOME_FOLDER
            value: {{ .Values.chain_home_folder }}
          - name: SIGNER_NAME
            value: {{ .Values.signer.name }}
          - name: DOJ_CHAIN_HOME_FOLDER
            value: {{ .Values.doj_chf }}
          - name: SIGNER_PASSWD
             {{- if default .Values.signer.passwordSecret .Values.global.passwordSecret }}
            valueFrom:
              secretKeyRef:
                name: {{ default .Values.signer.passwordSecret .Values.global.passwordSecret }}
                key: password
             {{- else}}
            value: {{ .Values.signer.password }}
             {{- end }}
          {{- if default .Values.signer.mnemonicSecret .Values.global.mnemonicSecret }}
          - name: SIGNER_SEED_PHRASE
            valueFrom:
              secretKeyRef:
                name: {{ default .Values.signer.mnemonicSecret .Values.global.mnemonicSecret }}
                key: mnemonic
          {{- end }}
          - name: CHAIN_ID
            value: "{{ include "dojima-chain.chainID" . }}"
          - name: ETH_HOST
            value: {{ .Values.h4s.eth }}
          - name: ETH_FAUCET_DEST
            value: {{ .Values.env.faucet_dest | quote }}
          - name: ETH_FAUCET_AMT
            value: {{ .Values.env.faucet_amt | quote }}
          - name: ETH_ACC_PASS
            value: {{ .Values.env.eth_acc_pass | quote }}
        volumeMounts:
          - name: data
            mountPath: /root
          - name: scripts
            mountPath: /kube-scripts/
      - name: copy-keystore
        image: "alpine/k8s:{{ .Values.global.images.alpineK8s.tag }}@sha256:{{ .Values.global.images.alpineK8s.hash }}"
        command: [ '/scripts/copy-keystore.sh' ]
        env:
          - name: CHAIN_HOME_FOLDER
            value: {{ .Values.chain_home_folder }}
          - name: DOJ_CHAIN_HOME_FOLDER
            value: {{ .Values.doj_chf }}
        volumeMounts:
          - name: scripts
            mountPath: /scripts
          - name: data
            mountPath: /root
      - name: init-keepalive
        image: "busybox:{{ .Values.global.images.busybox.tag }}@sha256:{{ .Values.global.images.busybox.hash }}"
        command:
        - /bin/sh
        - -c
        - |
          sysctl -w net.ipv4.tcp_keepalive_time=120
          sysctl -w net.ipv4.tcp_keepalive_intvl=60
          sysctl -w net.ipv4.tcp_keepalive_probes=3
        securityContext:
          privileged: true
      - name: init-hermeschain
        image: "busybox:{{ .Values.global.images.busybox.tag }}@sha256:{{ .Values.global.images.busybox.hash }}"
        command: ['sh', '-c', 'until nc -zv {{ .Values.h4s.hermesApi }}; do echo waiting for hermesnode; sleep 2; done']
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ include "dojima-chain.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - dojimachain
            - --networkid={{ .Values.global.dojimachain.chainId }}
            - --port=30303
            - --ipcpath={{.Values.doj_chf}}/data/dojimachain.ipc
            - --syncmode=full
            {{- if eq .Values.enable.node "fullnode"  }}
            - --gcmode=archive
            {{- end }}
            {{- if eq .Values.net "testnet" }}
            - --dojima-testnet=true
            {{- else }}
            - --dojima-mainnet=true
            {{- end }}
            {{- if eq .Values.enable.node "validator" }}
            - --mine
            - --unlock=0xfAd68c705Bf42414b65832a100fFd3917Fab2637
            - --password={{ .Values.config.password }}
            - --allow-insecure-unlock
            - --nodiscover
            - --maxpeers=2
            {{- end }}
            {{- if .Values.service.http }}
            - --http
            - --http.api={{.Values.config.http_api}}
            - --http.addr={{.Values.config.http_addr}}
            - --http.port={{ .Values.config.http_port }}
            - --http.corsdomain=*
            - --http.vhosts=*
            {{- end }}
            {{- if .Values.service.ws }}
            - --ws
            - --ws.origins="*"
            - --ws.port={{ .Values.service.port.wss }}
            - --ws.addr=0.0.0.0
            - --ws.api=personal,eth,web3
            {{- end }}
            {{- if or .Values.enodes .Values.config.bootnodes }}
            - --bootnodes={{ include "dojima-chain.enodes" . }}
            {{- end }}
          volumeMounts:
            - name: data
              mountPath: /root/
            - name: scripts
              mountPath: scripts/
          env:
            - name: EXTERNAL_IP
              valueFrom:
                configMapKeyRef:
                  name: {{ include "dojima-chain.fullname" . }}-external-ip
                  key: externalIP
            {{- range $key, $value := .Values.environment }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          livenessProbe:
            failureThreshold: 10
            timeoutSeconds: 10
            periodSeconds: 10
            exec:
              command:
                - /scripts/probe.sh
          readinessProbe:
            timeoutSeconds: 10
            exec:
              command:
                - test
                - $(geth attach --exec net.listening http://localhost:{{ .Values.service.port.http }}) == "true"
          ports:
            - name: http
              containerPort: {{ .Values.service.port.http }}
              protocol: TCP
            - name: wss
              containerPort: {{ .Values.service.port.wss }}
              protocol: TCP
            - name: devp2p
              containerPort: {{ .Values.service.port.devp2p }}
              protocol: TCP
            - name: graphql
              containerPort: {{ .Values.service.port.graphql }}
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}

      volumes:
      - name: data
      {{- if and .Values.persistence.enabled (not .Values.persistence.hostPath) }}
        persistentVolumeClaim:
          claimName: {{ if .Values.persistence.existingClaim }}{{ .Values.persistence.existingClaim }}{{- else }}{{ template "dojima-chain.fullname" . }}{{- end }}
      {{- else if and .Values.persistence.enabled .Values.persistence.hostPath }}
        hostPath:
          path: {{ .Values.persistence.hostPath }}
          type: DirectoryOrCreate
      {{- else }}
        emptyDir: {}
      {{- end }}
      - name: scripts
        configMap:
          name: {{ include "dojima-chain.fullname" . }}-scripts
          defaultMode: 0777
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
