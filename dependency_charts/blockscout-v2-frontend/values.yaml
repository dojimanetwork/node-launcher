# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

net: testnet

replicaCount: 1

image:
  blockscout:
    repository: blockscout/blockscout
    pullPolicy: IfNotPresent
    tag: "latest"
    hash: "sha256:9d76e4077c5364d2ba0a7118bd5cecb0ee152b95a501c257c3a74895a0020b9e"
  smartcontract_verifier:
    repository: ghcr.io/blockscout/smart-contract-verifier
    testnet:
      tag: main
  stats:
    repository: ghcr.io/blockscout/stats
    tag: main
  postgres:
    image: postgres:13.4
  frontend:
    repository: ghcr.io/blockscout/frontend
    tag: main

frontend:
  environment:
    NEXT_PUBLIC_NETWORK_NAME:
      _default: Dojima
    NEXT_PUBLIC_NETWORK_SHORT_NAME:
      _default: DOJ
    NEXT_PUBLIC_NETWORK_ID:
      _default: 1001
    NEXT_PUBLIC_NETWORK_CURRENCY_NAME:
      _default: Dojima Network
    NEXT_PUBLIC_NETWORK_CURRENCY_SYMBOL:
      _default: DOJ
    NEXT_PUBLIC_NETWORK_CURRENCY_DECIMALS:
      _default: 18
    NEXT_PUBLIC_FEATURED_NETWORKS:
      _default: https://raw.githubusercontent.com/blockscout/frontend-configs/main/configs/featured-networks/eth-goerli.json
    NEXT_PUBLIC_API_HOST:
      _default: v2-doj-bex-test.dojima.network
    NEXT_PUBLIC_APP_HOST:
      _default: v2-doj-bex-test.dojima.network
    NEXT_PUBLIC_API_BASE_PATH:
      _default: /
    NEXT_PUBLIC_STATS_API_HOST:
      _default: https://stats-bex-test.dojima.network
    NEXT_PUBLIC_NETWORK_RPC_URL:
      _default: https://api-test.d11k.dojima.network

scVerifier:
  environment:
    SMART_CONTRACT_VERIFIER__SERVER__HTTP__ADDR:
      _default: 0.0.0.0:8052
    SMART_CONTRACT_VERIFIER__SERVER__GRPC__ADDR:
      _default: 0.0.0.0:8053
    SMART_CONTRACT_VERIFIER__SOLIDITY__ENABLED:
     _default: 'true'
    SMART_CONTRACT_VERIFIER__SOLIDITY__COMPILERS_DIR:
      _default: /tmp/solidity-compilers
    SMART_CONTRACT_VERIFIER__SOLIDITY__REFRESH_VERSIONS_SCHEDULE:
      _default: 0 0 * * * * *
    # It depends on the OS you are running the service on
    SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL:
      _default: https://solc-bin.ethereum.org/linux-amd64/list.json
    #SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL=https://solc-bin.ethereum.org/macosx-amd64/list.json
    #SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL=https://solc-bin.ethereum.org/windows-amd64/list.json
    SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__REGION:
      _default: "ap-south-1"
    SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__S3__ENDPOINT:
      _default: https://storage.googleapis.com
    SMART_CONTRACT_VERIFIER__SOURCIFY__ENABLED:
      _default: 'true'
    SMART_CONTRACT_VERIFIER__SOURCIFY__API_URL:
      _default: https://sourcify.dev/server/
    SMART_CONTRACT_VERIFIER__SOURCIFY__VERIFICATION_ATTEMPTS:
      _default: 3
    SMART_CONTRACT_VERIFIER__SOURCIFY__REQUEST_TIMEOUT:
      _default: 10
    SMART_CONTRACT_VERIFIER__METRICS__ENABLED:
      _default: 'true'
    SMART_CONTRACT_VERIFIER__METRICS__ADDR:
      _default: 0.0.0.0:6062
    SMART_CONTRACT_VERIFIER__METRICS__ROUTE:
      _default: /metrics
    SMART_CONTRACT_VERIFIER__JAEGER__ENABLED:
      _default: 'false'

stats:
  environment:
    RUST_LOG:
      _default: info
    STATS__RUN_MIGRATIONS:
      _default: true
    STATS__TRACING__FORMAT:
      _default: json
    STATS__METRICS__ENABLED:
      _default: true
    STATS__BLOCKSCOUT_DB_URL:
      _default: postgresql://postgres:@blockscout-v2-backend:5432/postgres?ssl=false
    STATS__DB_URL:
      _default: postgres://postgres:@blockscout-v2-backend:5432/stats


imagePullSecrets: []
nameOverride: "v2-blockscout-frontend"
fullnameOverride: "v2-blockscout-frontend"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "v2-serv-blockscout-frontend"

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
terminationGracePeriodSeconds: 300
service:
  type: ClusterIP
  postgres: 5432
  bs: 4000
  bs_rs: 8052
  bs_stats_http: 8050
  bs_stats_metrics: 6060
  bs_frontend: 3000


ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # cert-manager.io/cluster-issuer: letsencrypt-production
  hosts: []
    # - host: midgard.example.com
    #   paths:
    #   - path: /
    #     backend:
    #       serviceName: gateway
    #       servicePort: midgard
  tls: []
    # - secretName: midgard-tls
    #   hosts:
    #     - midgard.example.com

persistence:
  enabled: false
  size:
    testnet: 50Gi
    stagenet: 150Gi
    mainnet: 200Gi
  accessMode: ReadWriteOnce
#  storageClass: gp3

resources:
  postgres:
    limits:
      cpu: 0.5
      memory: 10Gi
    requests:
      cpu: 0.2
      memory: 8Gi
  smart_contract_verifier:
    limits:
      cpu: 0.05
      memory: 50Mi
    requests:
      cpu: 0.01
      memory: 20Mi
  stats:
    limits:
      memory: "0.5Gi"
      cpu: "0.25"
    requests:
      memory: "0.5Gi"
      cpu: "0.25"
  frontend:
    limits:
      memory: "0.3Gi"
      cpu: "0.4"
    requests:
      memory: "0.3Gi"
      cpu: "0.2"

readinessProbe:
  postgres:
    enable: true
  scVerifier:
    enable: false
    path: /health?service=
    params:
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 60
  stats:
    path: /health
    enable: false
    params:
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 60
  frontend:
    enable: false
    path: /api/healthz
    params:
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 30


livenessProbe:
  postgres:
    enable: true
  scVerifier:
    enable: false
    path: /health?service=
    params:
      initialDelaySeconds: 100
      periodSeconds: 100
      timeoutSeconds: 30
  stats:
    path: /health
    enable: false
    params:
      initialDelaySeconds: 100
      periodSeconds: 100
      timeoutSeconds: 30
  frontend:
    path: /api/healthz
    enable: false
    params:
      initialDelaySeconds: 100
      periodSeconds: 100
      timeoutSeconds: 30

nodeSelector: {}

tolerations: []

affinity: {}

postgres:
  environment:
    POSTGRES_USER:
      _default: 'postgres'
    POSTGRES_HOST_AUTH_METHOD:
      _default: 'trust'
  files:
    mountPath: /docker-entrypoint-initdb.d
    list:
      init.sql: |
        CREATE DATABASE stats;
        GRANT ALL PRIVILEGES ON DATABASE stats TO postgres;
        CREATE DATABASE blockscout;
        GRANT ALL PRIVILEGES ON DATABASE stats TO postgres;
      config.toml: |-
        [server]
        addr = "0.0.0.0:8043"
    
        [compilers]
        # if omitted, number of CPU cores would be used
        max_threads = 8
    
        [solidity]
        enabled = true
        compilers_dir = "/tmp/solidity-compilers"
        refresh_versions_schedule = "0 0 * * * * *"
        [solidity.fetcher.list]
        # It depends on the OS you are running the service on
        list_url = "https://solc-bin.ethereum.org/linux-amd64/list.json"
        # list_url = "https://solc-bin.ethereum.org/macosx-amd64/list.json"
        # list_url = "https://solc-bin.ethereum.org/windows-amd64/list.json"
    
        #[solidity.fetcher.s3]
        #access_key = "access_key"
        #secret_key = "secret_key"
        #region = "region"
        #endpoint = "endpoint"
        ## The only required field for the s3 fetcher
        #bucket = "bucket"
    
        [vyper]
        enabled = true
        compilers_dir = "/tmp/vyper-compilers"
        refresh_versions_schedule = "0 0 * * * * *"
        [vyper.fetcher.list]
        list_url = "https://raw.githubusercontent.com/blockscout/solc-bin/main/vyper.list.json"
        # list_url = "https://raw.githubusercontent.com/blockscout/solc-bin/main/vyper.macos.list.json"
    
        [sourcify]
        enabled = true
        api_url = "https://sourcify.dev/server/"
        verification_attempts = 3
        request_timeout = 10
    
        # [extensions.solidity.sig_provider]
        # url = "http://127.0.0.1:8051/"
    
        # [extensions.vyper.sig_provider]
        # url = "http://127.0.0.1:8051/"
    
        # [extensions.sourcify.sig_provider]
        # url = "http://127.0.0.1:8051/"
    
        [metrics]
        enabled = false
        addr = "0.0.0.0:6060"
        route = "/metrics"
    
        [jaeger]
        enabled = false
        agent_endpoint = "localhost:6831"


# necessary for lint
global:
  images:
    alpine:
      tag: foo
      hash: bar
