apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "solana-daemon.fullname" . }}-scripts
data:
  vote-account-keypair.json: |
    [84,6,188,179,71,29,252,78,143,153,253,179,61,124,211,57,206,233,7,83,49,238,52,33,95,195,29,31,40,173,162,225,147,254,3,115,230,247,106,165,193,41,66,216,90,40,193,11,214,67,108,199,240,102,123,54,89,168,113,117,101,211,173,238]
  validator-keypair.json: |
    [153,110,49,154,28,134,154,69,37,243,16,139,50,36,68,252,126,69,241,251,214,121,41,111,143,57,13,223,254,44,176,243,42,3,207,34,197,80,123,58,174,34,63,172,34,154,21,14,173,61,59,250,181,102,194,181,65,106,5,178,157,47,244,166]
  external-ip.sh: |
    #!/bin/bash
    # ./external-ip.sh <host_network> <service_name> <config_map>
    #
    # Script to extract external ip from a service:
    # If host network returns public ip of the node
    # If LoadBalancer returns external IP either directly or from hostname
    # If ClusterIP return service IP
    # If NodePort returns node IP

    apk add bind-tools

    HOST_NETWORK=$1
    SERVICE=$2
    CONFIGMAP=$3

    if [ "$HOST_NETWORK" = "true" ]; then
      external_ip=$(curl -s http://whatismyip.akamai.com)
    else
      type=$(kubectl get svc "$SERVICE" -o jsonpath='{.spec.type}')
      external_ip=""

      if [ "$type" = "ClusterIP" ]; then
        external_ip=$(kubectl get svc "$SERVICE" -o jsonpath='{.spec.clusterIP}')
      elif [ "$type" = "NodePort" ]; then
        external_ip=$(kubectl get nodes --selector=kubernetes.io/role!=master -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
      elif [ "$type" = "LoadBalancer" ]; then
        # Hack TODO remove when this is fixed here https://github.com/kubernetes/kubernetes/issues/82595
        kubectl annotate svc "$SERVICE" service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled=false --overwrite
        kubectl annotate svc "$SERVICE" service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled=true --overwrite

        while [ -z "$external_ip" ]; do
          echo "Waiting for load balancer external endpoint..."
          external_ip=$(kubectl get svc "$SERVICE" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$external_ip" ]; then
            hostname=$(kubectl get svc "$SERVICE" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            [ -n "$hostname" ] && external_ip=$(dig +short "$hostname" | sort | head -1)
          fi
          [ -z "$external_ip" ] && sleep 10
        done
      fi
    fi

    kubectl create configmap "$CONFIGMAP" --from-literal=externalIP="$external_ip" --dry-run=client -o yaml | kubectl apply -f -
