apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "hermesnode.fullname" . }}
  labels:
    {{- include "hermesnode.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: {{ .Values.strategyType }}
  selector:
    matchLabels:
      {{- include "hermesnode.selectorLabels" . | nindent 6 }}
  template: 
    metadata: 
      labels:
        {{- include "hermesnode.selectorLabels" . | nindent 8 }}
    spec: 
      {{- with .Values.imagePullSecrets }} 
      imagePullSecrets: 
	{{- toYaml . | nindent 8 }} 
      {{- end }} 
      serviceAccountName: {{ include "hermesnode.serviceAccountName" . }} 
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }} 
      {{- if .Values.priorityClassName }} 
      priorityClassName: {{ .Values.priorityClassName }} {{- end }}
      initContainers:
      - name: init-external-ip
        image: "alpine/k8s:{{ .Values.global.images.alpineK8s.tag }}@sha256:{{ .Values.global.images.alpineK8s.hash }}"
        {{- if .Values.global.gateway.enabled }}
        command: ['/scripts/external-ip.sh', 'false', '{{ .Values.global.gateway.name }}', '{{ include "hermesnode.fullname" . }}-external-ip']
        {{- else }}
        command: ['/scripts/external-ip.sh', 'false', '{{ include "hermesnode.fullname" . }}', '{{ include "hermesnode.fullname" . }}-external-ip']
        {{- end }}
        volumeMounts:
          - name: scripts
            mountPath: /scripts           
      containers:
         - name: {{ .Chart.Name }}
           securityContext:
             {{- toYaml .Values.securityContext | nindent 12 }}
           image: "{{ include "hermesnode.image" . }}"
           imagePullPolicy: {{ .Values.image.pullPolicy }}
           command:
           - /scripts/{{ .Values.type }}.sh
           volumeMounts:
           - name: data
             mountPath: /root/
           - name: scripts
             mountPath: /kube-scripts/
           env:
             - name: VALIDATOR
               {{- if eq .Values.type "fullnode" }}
               value: "false"
               {{- else }}
               value: "true"
               {{- end }}
             - name: PEER
               value: {{ default .Values.peer .Values.global.peer }}
             - name: SEED
               value: $(HOSTNAME)
             - name: SEEDS
               value: "{{ .Values.seeds }}"
             - name: PEER_API
               value: "{{ .Values.peerApi }}"
             - name: CONTRACT
               value: "{{ include "hermesnode.ethRouterContract" . }}"
             - name: DEBUG
               value: "{{ .Values.debug }}"
             - name: HARDFORK_BLOCK_HEIGHT
               value: "{{ .Values.haltHeight }}"
             - name: NET
               value: {{ include "hermesnode.net" . }}
             - name: SIGNER_NAME
               value: {{ .Values.signer.name }}
             - name: SIGNER_PASSWORD
               value: password
             - name: SIGNER_SEED_PHRASE
               value: "wink umbrella toss bleak patient extend palm asthma divorce quit track planet depend tenant mimic shiver girl segment lend unit body account monster lizard"
             - name: CHAIN_HOME_FOLDER
               value: $(HOME)/.hermes
             - name: CHAIN_ID
               value: "{{ include "hermesnode.chainID" . }}"
             - name: THOR_AUTO_STATE_SYNC_ENABLED
               value: "{{ .Values.statesync.auto }}"
             - name: THOR_COSMOS_STATE_SYNC_SNAPSHOT_INTERVAL
               value: "{{ .Values.statesync.snapshotInterval }}"
             - name: THOR_TENDERMINT_LOG_FORMAT
               value: "json"
             - name: AR_KEY_PATH
               value: ""
             - name: AR_ADDRESS
               value: "2txTDSdb_RjG12uHZlVsB5jrfPzqxtzScKTtPef2KZ0"
           ports: 
            - name: api 
              containerPort: {{ .Values.service.port.api }} 
              protocol: TCP 
            - name: p2p 
              containerPort: {{ include "hermesnode.p2p" . }} 
              protocol: TCP
            - name: rpc 
              containerPort: {{ include "hermesnode.rpc" . }} 
              protocol: TCP 
            - name: prometheus 
              containerPort: 26660
              protocol: TCP
           livenessProbe: 
             timeoutSeconds: 10 
             httpGet: 
               path: /status 
               port: rpc 
           startupProbe: 
             failureThreshold: 30 
             timeoutSeconds: 10 
             httpGet:
               path: /status 
               port: rpc 
           readinessProbe: 
             timeoutSeconds: 10 
             httpGet: 
               path: /status 
               port: rpc 
           resources:
             {{- toYaml .Values.resources | nindent 12 }}
      volumes: 
        - name: data 
          {{- if and .Values.persistence.enabled (not .Values.persistence.hostPath) }} 
          persistentVolumeClaim: 
            claimName: {{ if .Values.persistence.existingClaim }}{{ .Values.persistence.existingClaim }}{{- else }}{{ template "hermesnode.fullname" . }}{{- end }}
          {{- else if and .Values.persistence.enabled .Values.persistence.hostPath }} 
          hostPath: 
            path: {{ .Values.persistence.hostPath }} 
            type: DirectoryOrCreate
          {{- else }} 
          emptyDir: { } 
          {{- end }}
        - name: scripts
          configMap:
            name: "{{ include "hermesnode.fullname" . }}-scripts"
            defaultMode: 0777
        - name: configs
          configMap:
            name: "{{ include "hermesnode.fullname" . }}-configs"
            defaultMode: 0666
      {{- with .Values.nodeSelector }} 
      nodeSelector: 
        {{- toYaml . | nindent 8 }} 
      {{- end }} 
      {{- with .Values.affinity }} 
      affinity:
        {{- toYaml . | nindent 8 }} 
      {{- end }} 
      {{- with .Values.tolerations }} 
      tolerations: 
        {{- toYaml . | nindent 8 }}
      {{- end }}
