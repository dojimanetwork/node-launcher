apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "hermesnode.fullname" . }}
  labels:
    {{- include "hermesnode.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: {{ .Values.strategyType }}
  selector:
    matchLabels:
      {{- include "hermesnode.selectorLabels" . | nindent 6 }}
  template: 
    metadata: 
      labels:
        {{- include "hermesnode.selectorLabels" . | nindent 8 }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/metrics'
        prometheus.io/port: '{{ .Values.service.port.testnet.prometheus_collector }}'
    spec:
      {{- with .Values.imagePullSecrets }} 
      imagePullSecrets: 
	{{- toYaml . | nindent 8 }} 
      {{- end }} 
      serviceAccountName: {{ include "hermesnode.serviceAccountName" . }} 
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }} 
      {{- if .Values.priorityClassName }} 
      priorityClassName: {{ .Values.priorityClassName }} {{- end }}
      initContainers:
      - name: init-external-ip
        image: "alpine/k8s:{{ .Values.global.images.alpineK8s.tag }}@sha256:{{ .Values.global.images.alpineK8s.hash }}"
        {{- if .Values.global.gateway.enabled }}
        command: ['/scripts/external-ip.sh', 'false', '{{ .Values.global.gateway.name }}', '{{ include "hermesnode.fullname" . }}-external-ip']
        {{- else }}
        command: ['/scripts/external-ip.sh', 'false', '{{ include "hermesnode.fullname" . }}', '{{ include "hermesnode.fullname" . }}-external-ip']
        {{- end }}
        volumeMounts:
          - name: scripts
            mountPath: /scripts

      {{- if .Values.haltHeight }}
      - name: halt-height
        image: {{ include "hermesnode.image" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: [ 'sh', '-c', '[ ! -e /root/.hermesnode/data/priv_validator_state.json ] || [ $(cat /root/.hermesnode/data/priv_validator_state.json | jq -r .height) -lt {{ .Values.haltHeight }} ] || sleep infinity' ]
        volumeMounts:
          - name: data
            mountPath: /root/
      {{- end }}

      {{- if default .Values.peer .Values.global.peer }}
      - name: init-peer
        image: busybox:{{ .Values.global.images.busybox.tag }}@sha256:{{ .Values.global.images.busybox.hash }}
        command: [ 'sh', '-c', 'until nc -zv {{ default .Values.peer .Values.global.peer }}:{{ include "hermesnode.rpc" . }}; do echo waiting for peer hermes; sleep 2; done' ]
      {{- end }}

      {{- if .Values.peerApi }}
      - name: init-peer-api
        image: busybox:{{ .Values.global.images.busybox.tag }}@sha256:{{ .Values.global.images.busybox.hash }}
        command: [ 'sh', '-c', "until nc -zv {{ .Values.peerApi }}:1317; do echo waiting for peer hermesnode; sleep 2; done" ]
      {{- end }}

      containers:
         - name: {{ .Chart.Name }}
           securityContext:
             {{- toYaml .Values.securityContext | nindent 12 }}
           image: "{{ include "hermesnode.image" . }}"
           imagePullPolicy: {{ .Values.image.pullPolicy }}
           command: ["/scripts/{{ .Values.type }}.sh", "hermesnode", "start", "--rpc.laddr", "tcp://0.0.0.0:26657"]
           volumeMounts:
           - name: data
             mountPath: /root/
           - name: scripts
             mountPath: /kube-scripts/
           env:
             - name: EXTERNAL_IP
               valueFrom:
                 configMapKeyRef:
                   name: {{ include "hermesnode.fullname" . }}-external-ip
                   key: externalIP
             - name: VALIDATOR
               {{- if eq .Values.type "fullnode" }}
               value: "false"
               {{- else }}
               value: "true"
               {{- end }}
             - name: PEER
               {{- if eq .Values.type "genesis" }}
               valueFrom:
                 fieldRef:
                   fieldPath: metadata.name
               {{- else }}
               value: {{ .Values.peer }}
               {{- end }}
             - name: SEED
               {{- if eq .Values.type "genesis" }}
               valueFrom:
                 fieldRef:
                   fieldPath: metadata.name
               {{- else }}
               value: {{ .Values.peer }}
               {{- end }}
             - name: SEEDS
               value: {{ .Values.seeds }}
             - name: PEER_API
               value: "{{ .Values.peerApi }}"
             - name: CONTRACT
               value: "{{ include "hermesnode.ethRouterContract" . }}"
             - name: DEBUG
               value: "{{ .Values.debug }}"
             - name: HARDFORK_BLOCK_HEIGHT
               value: "{{ .Values.haltHeight }}"
             - name: NET
               value: {{ include "hermesnode.net" . }}
             - name: SIGNER_NAME
               value: {{ .Values.signer.name }}
             - name: SIGNER_PASSWD
               {{- if default .Values.signer.passwordSecret .Values.global.passwordSecret }}
               valueFrom:
                 secretKeyRef:
                   name: {{ default .Values.signer.passwordSecret .Values.global.passwordSecret }}
                   key: password
               {{- else}}
               value: {{ .Values.signer.password }}
               {{- end }}
             - name: SIGNER_SEED_PHRASE
               value: "{{ .Values.signer.signer_seed_phrase }}"
             - name: CHAIN_HOME_FOLDER
               value: {{ .Values.chain_home_folder }}
             - name: CHAIN_ID
               value: "{{ include "hermesnode.chainID" . }}"
             - name: HERMES_AUTO_STATE_SYNC_ENABLED
               value: "{{ .Values.statesync.auto }}"
             - name: HERMES_COSMOS_STATE_SYNC_SNAPSHOT_INTERVAL
               value: "{{ .Values.statesync.snapshotInterval }}"
             - name: HERMES_TENDERMINT_LOG_FORMAT
               value: "json"
             - name: AR_KEY_PATH
               value: "/scripts/testnet/arweave-testnet/2txTDSdb_RjG12uHZlVsB5jrfPzqxtzScKTtPef2KZ0.json"
             - name: AR_ADDRESS
               value: "2txTDSdb_RjG12uHZlVsB5jrfPzqxtzScKTtPef2KZ0"
             - name: SOL_KEYPATH
               value: "/scripts/testnet/solana_testnet/82iP5jLLyiuTHbQRrSwUgZ6sKycT2mjbNkncgpm7Duvg.json"
             - name: SOL_PUBKEY
               value: "82iP5jLLyiuTHbQRrSwUgZ6sKycT2mjbNkncgpm7Duvg"
             - name: DOT_ADDRESS
               value: "5H16DLfWFLdpm5C4f9Qr6UkADsT1PtD9jELWF9WKuiC7St1T"
             - name: KEY_PASSPHRASE
               value: {{ .Values.signer.password }}
             - name: ETH_HOST
               value: "{{ .Values.eth_host }}"
             - name: DOJIMA_RPC_URL
               value: "{{ .Values.dojima_rpc_url }}"
             - name: FAUCET_DEST
               value: {{ .Values.env.faucet_dest | quote }}
             - name: FAUCET_AMT
               value: "{{ .Values.env.faucet_amt }}"
             - name: ETH_ACC_PASS
               value: {{ .Values.env.eth_acc_pass | quote }}
             - name: HERMESNODE_SERVICE_PORT_RPC
               value: {{ .Values.hermesnode.environment.HERMESNODE_SERVICE_PORT_RPC._default | quote }}
             - name: BINANCE_DAEMON_SERVICE_PORT_RPC
               value: {{ .Values.hermesnode.environment.BINANCE_DAEMON_SERVICE_PORT_RPC._default | quote }}
             - name: BINANCE_HOST
               value: {{ .Values.hermesnode.environment.BINANCE_HOST._default | quote }}
             - name: BTC_HOST
               value: {{ .Values.hermesnode.environment.BTC_HOST._default | quote }}
             - name: AVAX_HOST
               value: {{ .Values.hermesnode.environment.AVAX_HOST._default | quote }}
             - name: BITCOIN_DAEMON_SERVICE_PORT_RPC
               value: {{ .Values.hermesnode.environment.BITCOIN_DAEMON_SERVICE_PORT_RPC._default | quote }}
             - name: ETHEREUM_DAEMON_SERVICE_PORT_RPC
               value: {{ .Values.hermesnode.environment.ETHEREUM_DAEMON_SERVICE_PORT_RPC._default | quote  }}
             - name: AVALANCHE_DAEMON_SERVICE_PORT_RPC
               value: {{ .Values.hermesnode.environment.AVALANCHE_DAEMON_SERVICE_PORT_RPC._default | quote }}
           ports: 
            - name: api 
              containerPort: {{ .Values.service.port.api }} 
              protocol: TCP 
            - name: p2p 
              containerPort: {{ include "hermesnode.p2p" . }} 
              protocol: TCP
            - name: rpc 
              containerPort: {{ include "hermesnode.rpc" . }} 
              protocol: TCP 
            - name: prometheus 
              containerPort: 26660
              protocol: TCP
            - name: grpc
              containerPort: {{ include "hermesnode.grpc" . }}
              protocol: TCP
            - name: abci
              containerPort: {{ include "hermesnode.abci" . }}
              protocol: TCP
            - name: prom-collector
              containerPort: {{ include "hermesnode.prometheus_collector" .}}
              protocol: TCP
            - name: grpc-web
              containerPort: {{ include "hermesnode.grpc-web" . }}
              protocol: TCP
            - name: pprof
              containerPort: {{ include "hermesnode.pprof" . }}
              protocol: TCP
            - name: rosetta
              containerPort: {{ include "hermesnode.rosetta" . }}
              protocol: TCP
           livenessProbe: 
             timeoutSeconds: 10 
             httpGet: 
               path: /status 
               port: rpc 
           startupProbe: 
             failureThreshold: 30 
             timeoutSeconds: 10 
             httpGet:
               path: /status 
               port: rpc 
           readinessProbe: 
             timeoutSeconds: 10 
             httpGet: 
               path: /status 
               port: rpc 
           resources:
             {{- toYaml .Values.resources | nindent 12 }}
      volumes: 
        - name: data 
          {{- if and .Values.persistence.enabled (not .Values.persistence.hostPath) }} 
          persistentVolumeClaim: 
            claimName: {{ if .Values.persistence.existingClaim }}{{ .Values.persistence.existingClaim }}{{- else }}{{ template "hermesnode.fullname" . }}{{- end }}
          {{- else if and .Values.persistence.enabled .Values.persistence.hostPath }} 
          hostPath: 
            path: {{ .Values.persistence.hostPath }} 
            type: DirectoryOrCreate
          {{- else }} 
          emptyDir: { } 
          {{- end }}
        - name: scripts
          configMap:
            name: "{{ include "hermesnode.fullname" . }}-scripts"
            defaultMode: 0777
        - name: configs
          configMap:
            name: "{{ include "hermesnode.fullname" . }}-configs"
            defaultMode: 0666
      {{- with .Values.nodeSelector }} 
      nodeSelector: 
        {{- toYaml . | nindent 8 }} 
      {{- end }} 
      {{- with .Values.affinity }} 
      affinity:
        {{- toYaml . | nindent 8 }} 
      {{- end }} 
      {{- with .Values.tolerations }} 
      tolerations: 
        {{- toYaml . | nindent 8 }}
      {{- end }}
