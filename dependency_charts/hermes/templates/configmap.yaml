apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "hermesnode.fullname" . }}-scripts
data:
  genesis.sh: |
    #!/bin/sh

    uname -m

  retry.sh: |
    #!/bin/sh

    TRY = 0

    while [ $TRY -lt 5 ]
    do
      "$@" 2 >/tmp/retry-out

      cat /tmp/retry-out
      if ! grep "account sequence mismatch" /tmp/retry-out > /dev/null; then
        break
      fi

      TRY=$((TRY + 1))
      echo "Retrying account sequence mismatch, try ${TRY}"
      sleep 2
    done

  set-node-keys.sh: |
    #!/bin/sh

    NODE_PUB_KEY=$(echo "$SIGNER_PASSWD" | hermes keys show hermesnode --pubkey --keyring-backend file | hermes pubkey )
    NODE_PUB_KEY_ED25519=$(echo "$SIGNER_PASSWD" | hermes ed25519 )
    VALIDATOR=$(hermes tendermint show-validator | hermes pubkey --bech cons)
    printf "%s\n%s\n" "$SIGNER_PASSWD" "$SIGNER_PASSWD" | hermes tx hermes set-node-keys "$NODE_PUB_KEY_ED25519" "$VALIDATOR" --from "$SIGNER_NAME" --keyring-backend file --chain-id "$CHAIN_ID" --yes --gas auto --gas-adjustment 2 --node "tcp://localhost:26657"

  set-ip-address.sh: |
    #!/bin/sh

    NODE_IP_ADDRESS=${1:-$(curl -s http://whatismyip.akamai.com)}
        printf "%s\n%s\n" "$SIGNER_PASSWD" "$SIGNER_PASSWD" | hermes tx hermes set-ip-address "$NODE_IP_ADDRESS" --from "$SIGNER_NAME" --keyring-backend file --chain-id "$CHAIN_ID" --yes --gas auto --gas-adjustment 2 --node "tcp://localhost:26657"

  set-version.sh: |
    #!/bin/sh

    printf "%s\n%s\n" "$SIGNER_PASSWD" "$SIGNER_PASSWD" | hermes tx hermes set-version --from "$SIGNER_NAME" --keyring-backend file --chain-id "$CHAIN_ID" --yes --gas auto --gas-adjustment 2 --node "tcp://localhost:26657"

  pause.sh: |
    #!/bin/sh

    printf "%s\n%s\n" "$SIGNER_PASSWD" "$SIGNER_PASSWD" | hermes tx hermes pause-chain --from "$SIGNER_NAME" --keyring-backend file --chain-id "$CHAIN_ID" --yes --gas auto --gas-adjustment 2 --node "tcp://localhost:26657"

  resume.sh: |
    #!/bin/sh

    printf "%s\n%s\n" "$SIGNER_PASSWD" "$SIGNER_PASSWD" | hermes tx hermes resume-chain --from "$SIGNER_NAME" --keyring-backend file --chain-id "$CHAIN_ID" --yes --gas auto --gas-adjustment 2 --node "tcp://localhost:26657"

  ban.sh: |
    #!/bin/sh

    printf "%s\n%s\n" "$SIGNER_PASSWD" "$SIGNER_PASSWD" | hermes tx hermes ban "$1" --from "$SIGNER_NAME" --keyring-backend file --chain-id "$CHAIN_ID" --yes --gas auto --gas-adjustment 2 --node "tcp://localhost:26657"

  init.sh: |
    #!/bin/sh

    # init chain
    if [ ! -f ~/.hermes/config/genesis.json ]; then
      "$@"
    fi

    # reset config and update seeds
    cp /kube-configs/config.toml ~/.hermes/config/config.toml
    "$@"


  entrypoint.sh: |
    #!/bin/sh

    # update max file open limit
    ulimit -n 65535

    ARGS="--log_format json --p2p.laddr tcp://0.0.0.0:{{ include "hermesnode.p2p" . }} --rpc.laddr tcp://0.0.0.0:{{ include "hermesnode.rpc" . }}"
    [ "$DEBUG" = "true" ] && ARGS="$ARGS --trace --log_level debug" || ARGS="$ARGS --log_level info"

    VALIDATOR_STATE_PATH="/root/.hermes/data/priv_validator_state.json"
    if [ "$HARDFORK_BLOCK_HEIGHT" != "" ] && [ -e "$VALIDATOR_STATE_PATH" ]; then
      # don't even start if height is equal or higher than halt block height
      if [ "$(jq <$VALIDATOR_STATE_PATH -r .height)" -ge "$HARDFORK_BLOCK_HEIGHT" ]; then
        echo "reached hard fork height: $HARDFORK_BLOCK_HEIGHT"
        sleep infinity
      fi

      ARGS="$ARGS --halt-height $HARDFORK_BLOCK_HEIGHT"
    fi

    # fullnodes keep latest 10 snapshots
    {{- if and (eq .Values.type "fullnode") .Values.statesync.seed }}
    ARGS="$ARGS --state-sync.snapshot-interval 50000 --state-sync.snapshot-keep-recent 10"
    {{- end }}

    {{- if .Values.statesync.peer }}
    ARGS="$ARGS --p2p.persistent_peers {{ .Values.statesync.peer }}"
    {{- end }}

    # shellcheck disable=SC2086
    printf "%s\n%s\n" "$SIGNER_NAME" "$SIGNER_PASSWD" | hermes start $ARGS

  external-ip.sh: |
    #!/bin/bash
    # ./external-ip.sh <host_network> <service_name> <config_map>
    #
    # Script to extract external ip from a service:
    # If host network returns public ip of the node
    # If LoadBalancer returns external IP either directly or from hostname
    # If ClusterIP return service IP
    # If NodePort returns node IP

    apk add bind-tools

    HOST_NETWORK=$1
    SERVICE=$2
    CONFIGMAP=$3

    if [ "$HOST_NETWORK" = "true" ]; then
      external_ip=$(curl -s http://whatismyip.akamai.com)
    else
      type=$(kubectl get svc "$SERVICE" -o jsonpath='{.spec.type}')
      external_ip=""

      if [ "$type" = "ClusterIP" ]; then
        external_ip=$(kubectl get svc "$SERVICE" -o jsonpath='{.spec.clusterIP}')
      elif [ "$type" = "NodePort" ]; then
        external_ip=$(kubectl get nodes --selector=kubernetes.io/role!=master -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
      elif [ "$type" = "LoadBalancer" ]; then
        # Hack TODO remove when this is fixed here https://github.com/kubernetes/kubernetes/issues/82595
        kubectl annotate svc "$SERVICE" service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled=false --overwrite
        sleep 5
        kubectl annotate svc "$SERVICE" service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled=true --overwrite

        while [ -z "$external_ip" ]; do
          echo "Waiting for load balancer external endpoint..."
          external_ip=$(kubectl get svc "$SERVICE" -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$external_ip" ]; then
            hostname=$(kubectl get svc "$SERVICE" -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            [ -n "$hostname" ] && external_ip=$(dig +short "$hostname" | sort | head -1)
          fi
          [ -z "$external_ip" ] && sleep 10
        done
      fi
    fi

    kubectl create configmap "$CONFIGMAP" --from-literal=externalIP="$external_ip" --dry-run=client -o yaml | kubectl apply -f -

  auto-update.sh: |
    #!/bin/bash

    set -euo pipefail

    # retrieve current nodes
    curl -sL -o /tmp/nodes {{ .Values.autoupdate.nodes }}

    # lookup version used by 2/3 of the network
    ACTIVE_NODES=$(jq -r '[.[] | select(.status == "Active")] | length' /tmp/nodes)
    THRESHOLD=$(($ACTIVE_NODES*2/3))
    NET_VERSION=$(jq -r "[.[] | select(.status==\"Active\")] | group_by(.version)[] | select(length > $THRESHOLD) | .[0].version" /tmp/nodes)

    # this will be empty if the network does not have >2/3 on a single version
    if [ -z "$NET_VERSION" ]; then
      echo "network has not reached 2/3 consensus on version, skipping upgrade"
      exit 0
    fi

    # retrieve hermesnode version
    HERMESNODE_IMAGE=$(kubectl get deploy hermesnode -o jsonpath="{.spec.template.spec.containers[0].image}")
    HERMESNODE_INIT_IMAGE=$(kubectl get deploy hermesnode -o jsonpath="{.spec.template.spec.initContainers[?(@.name==\"init-hermesnode\")].image}")

    # sanity checks
    if [ -z "$HERMESNODE_IMAGE" ] || [ -z "$HERMESNODE_INIT_IMAGE" ]; then
      echo "unable to retrieve hermesnode image versions"
      exit 1
    fi
    if [[ "$HERMESNODE_IMAGE" != "$HERMESNODE_INIT_IMAGE" ]]; then
      echo "hermesnode image and hermesnode init image are different versions"
      echo "hermesnode image: $HERMESNODE_IMAGE"
      echo "hermesnode init image: $HERMESNODE_INIT_IMAGE"
      exit 1
    fi

    # abort if we are already up to date
    HERMESNODE_VERSION=$(echo $HERMESNODE_IMAGE | awk -F- '{print $3}')
    if [[ "$HERMESNODE_VERSION" == "$NET_VERSION" ]]; then
      echo "current hermesnode version $HERMESNODE_VERSION is up to date"
      exit 0
    fi

    # patch the hermesnode version
    NEW_IMAGE=$(echo $(echo $HERMESNODE_IMAGE | awk 'BEGIN {FS=OFS="-"} {$NF=""}1')$NET_VERSION)
    echo "updating hermesnode version $HERMESNODE_VERSION -> $NET_VERSION"
    echo "new image $NEW_IMAGE"
    kubectl set image deployment/hermesnode {{ .Chart.Name }}=$NEW_IMAGE init-hermesnode=$NEW_IMAGE
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "hermesnode.fullname" . }}-configs
data:
  config.toml: |
    # https://docs.tendermint.com/v0.34/tendermint-core/configuration.html

    proxy_app = "tcp://127.0.0.1:26658"
    moniker = "local"
    fast_sync = true
    db_backend = "goleveldb"
    db_dir = "data"
    log_level = "info"
    log_format = "plain"
    genesis_file = "config/genesis.json"
    priv_validator_key_file = "config/priv_validator_key.json"
    priv_validator_state_file = "data/priv_validator_state.json"
    priv_validator_laddr = ""
    node_key_file = "config/node_key.json"
    abci = "socket"
    filter_peers = false

    [rpc]
    laddr = "tcp://127.0.0.1:26657"
    cors_allowed_origins = []
    cors_allowed_methods = ["HEAD", "GET", "POST"]
    cors_allowed_headers = ["Origin", "Accept", "Content-Type", "X-Requested-With", "X-Server-Time"]
    grpc_laddr = ""
    grpc_max_open_connections = 900
    unsafe = false
    max_open_connections = 900
    max_subscription_clients = 100
    max_subscriptions_per_client = 5
    timeout_broadcast_tx_commit = "10s"
    max_body_bytes = 1000000
    max_header_bytes = 1048576
    tls_cert_file = ""
    tls_key_file = ""
    pprof_laddr = "localhost:6060"

    [p2p]
    laddr = "tcp://0.0.0.0:26656"
    external_address = ""
    seeds = ""
    persistent_peers = ""
    upnp = false
    addr_book_file = "config/addrbook.json"
    addr_book_strict = false
    max_num_inbound_peers = 40
    max_num_outbound_peers = 10
    unconditional_peer_ids = ""
    persistent_peers_max_dial_period = "0s"
    flush_throttle_timeout = "100ms"
    max_packet_msg_payload_size = 1024
    send_rate = 5120000
    recv_rate = 5120000
    pex = true
    seed_mode = false
    private_peer_ids = ""
    allow_duplicate_ip = true
    handshake_timeout = "20s"
    dial_timeout = "3s"

    [mempool]
    recheck = true
    broadcast = true
    wal_dir = ""
    size = 5000
    max_txs_bytes = 1073741824
    cache_size = 10000
    keep-invalid-txs-in-cache = false
    max_tx_bytes = 1048576
    max_batch_bytes = 0

    [statesync]
    {{- if .Values.statesync.enabled }}
    enable = true
{{/*    trust_height = {{ .Values.statesync.trustHeight }}*/}}
    trust_hash = "{{ .Values.statesync.trustHash }}"
    rpc_servers = "{{ .Values.statesync.rpcServers }}"
    {{- else }}
    enable = false
    trust_height = 0
    trust_hash = ""
    rpc_servers = ""
    {{- end }}
    trust_period = "168h0m0s"
    discovery_time = "15s"
    temp_dir = ""
    chunk_request_timeout = "10s"
    chunk_fetchers = "4"

    [fastsync]
    version = "v0"

    [consensus]
    wal_file = "data/cs.wal/wal"
    timeout_propose = "3s"
    timeout_propose_delta = "500ms"
    timeout_prevote = "1s"
    timeout_prevote_delta = "500ms"
    timeout_precommit = "1s"
    timeout_precommit_delta = "500ms"
    timeout_commit = "5s"
    double_sign_check_height = 0
    skip_timeout_commit = false
    create_empty_blocks = true
    create_empty_blocks_interval = "0s"
    peer_gossip_sleep_duration = "100ms"
    peer_query_maj23_sleep_duration = "2s"

    [tx_index]
    indexer = "kv"

    [instrumentation]
    prometheus = true
    prometheus_listen_addr = ":26660"
    max_open_connections = 3
    namespace = "tendermint"

